/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import Joi from 'joi';
import config from 'config/config';
import enumFields from 'models/enum.model';

Joi.objectId = require('joi-objectid')(Joi);

const extensionsSchema = Joi.object().keys({
  extensionOption: Joi.object().keys({
    value: Joi.number(),
    extensionTime: Joi.string().valid(...Object.values(enumFields.EnumofExtension)),
  }),
  extensionFee: Joi.string(),
});
const termsEmbed = Joi.object().keys({
  initialFunding: Joi.number().integer().required(),
  futureFunding: Joi.number().integer(),
  totalLoanAmount: Joi.number().integer(),
  interestRateType: Joi.string().valid(...Object.values(enumFields.EnumInterestRateTypeOfTerms)),
  interestRateIndexValue: Joi.string(),
  interestRateIndexDate: Joi.date(),
  spread: Joi.string(),
  totalRate: Joi.string(),
  rateNotes: Joi.string(),
  initialTerm: Joi.object().keys({
    value: Joi.number(),
    extensionTime: Joi.string().valid(...Object.values(enumFields.EnumofExtension)),
  }),
  interestRateIndex: Joi.string(),
  extensions: Joi.array().items(extensionsSchema),
  LTC: Joi.string(),
  termNotes: Joi.string(),
  prePaymentPeriod: Joi.object().keys({
    value: Joi.number(),
    extensionTime: Joi.string().valid(...Object.values(enumFields.EnumofExtension)),
  }),
  IO: Joi.object().keys({
    value: Joi.number(),
    extensionTime: Joi.string().valid(...Object.values(enumFields.EnumofExtension)),
  }),
  amortization: Joi.object().keys({
    value: Joi.number(),
    extensionTime: Joi.string().valid(...Object.values(enumFields.EnumofExtension)),
  }),
  originationFee: Joi.string(),
  exitFee: Joi.string(),
  recourse: Joi.string().valid(...Object.values(enumFields.EnumOfRecourse)),
  asIsLTV: Joi.string(),
  stabilizedLTV: Joi.string(),
  asIsDY: Joi.string(),
  stabilizedDY: Joi.string(),
  asIsDSCR: Joi.string(),
  generalNotes: Joi.string(),
  prePaymentType: Joi.string().valid(...Object.values(enumFields.EnumPrePaymentTypeOfTerms)),
  stabilizedDSCR: Joi.string(),
  penaltySchedule: Joi.string(),
});
const TermSheetSchema = Joi.object().keys({
  url: Joi.string(),
  fileName: Joi.string(),
});
const documentSchema = Joi.object().keys({
  url: Joi.string().required(),
  fileName: Joi.string().required(),
  fileType: Joi.string(),
});
export const createLenderPlacement = {
  body: Joi.object().keys({
    lendingInstitution: Joi.objectId().required(),
    lenderContact: Joi.objectId().required(),
    notes: Joi.array().items(Joi.string()),
    stage: Joi.string()
      .valid(...Object.values(enumFields.EnumStageOfLenderPlacement))
      .required(),
    terms: termsEmbed,
    termSheet: Joi.string().regex(
      new RegExp(
        `https://${config.aws.bucket}.s3.amazonaws.com\\b([-a-zA-Z0-9()@:%_+.~#?&amp;/=]*.(pdf|doc|docx|ppt|xls|xlsx|pptx)$)`
      )
    ),
  }),
};

export const updateLenderPlacement = {
  body: Joi.object().keys({
    lendingInstitution: Joi.objectId(),
    lenderContact: Joi.objectId(),
    nextStep: Joi.string(),
    notes: Joi.array().items(Joi.string()),
    stage: Joi.string().valid(...Object.values(enumFields.EnumStageOfLenderPlacement)),
    terms: termsEmbed,
    termSheet: TermSheetSchema,
  }),
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const getLenderPlacementById = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const deleteLenderPlacementById = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const getLenderPlacement = {
  body: Joi.object().keys({}).unknown(true),
};

export const paginatedLenderPlacement = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object()
    .keys({
      page: Joi.number().default(1),
      limit: Joi.number().default(10).max(100),
    })
    .unknown(true),
};

export const sendMessage = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
  body: Joi.object().keys({
    message: Joi.string(),
    documents: Joi.array().items(documentSchema),
  }),
};
export const getMessages = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
  body: Joi.object()
    .keys({
      message: Joi.string(),
      documents: Joi.array().items(documentSchema),
    })
    .unknown(true),
};
