/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import Joi from 'joi';
import config from 'config/config';
import enumFields from 'models/enum.model';

Joi.objectId = require('joi-objectid')(Joi);

const termsEmbed = Joi.object().keys({
  initialFunding: Joi.number().integer().required(),
  futureFunding: Joi.number().integer(),
  totalLoanAmount: Joi.number().integer(),
  interestRateType: Joi.string().valid(...Object.values(enumFields.EnumInterestRateTypeOfTerms)),
  interestRateIndexValue: Joi.string(),
  interestRateIndexDate: Joi.date(),
  spread: Joi.number().integer(),
  totalRate: Joi.string(),
  rateNotes: Joi.string(),
  initialTerm: Joi.string(),
  extensionOptionOne: Joi.string(),
  extensionFee: Joi.string(),
  interestRateIndex: Joi.string(),
  extensionOptionTwo: Joi.string(),
  LTC: Joi.string(),
});

const TermSheetSchema = Joi.object().keys({
  url: Joi.string(),
  fileName: Joi.string(),
});

export const createLenderPlacement = {
  body: Joi.object().keys({
    lendingDetails: Joi.array()
      .items(
        Joi.object()
          .keys({
            lendingInstitution: Joi.objectId().required(),
            deal: Joi.objectId().required(),
          })
          .required()
      )
      .required(),
    lenderContact: Joi.objectId(),
    notes: Joi.array().items(Joi.string()),
    stage: Joi.string().valid(...Object.values(enumFields.EnumStageOfLenderPlacement)),
    terms: termsEmbed,
    termSheet: TermSheetSchema,
    isEmailSent: Joi.string().valid(...Object.values(enumFields.EnumOfEmailStatus)),
    followOnDate: Joi.date(),
    postmarkMessageId: Joi.array().items(Joi.string()),
  }),
};

export const removeLenderPlacement = {
  query: Joi.object().keys({
    lendingInstitution: Joi.objectId().required(),
    deal: Joi.objectId().required(),
  }),
};

export const updateLenderPlacement = {
  body: Joi.object().keys({
    lendingInstitution: Joi.objectId(),
    lenderContact: Joi.objectId(),
    notes: Joi.array().items(Joi.string()),
    stage: Joi.string().valid(...Object.values(enumFields.EnumStageOfLenderPlacement)),
    terms: termsEmbed,
    termSheet: Joi.string().regex(
      new RegExp(
        `https://${config.aws.bucket}.s3.amazonaws.com\\b([-a-zA-Z0-9()@:%_+.~#?&amp;/=]*.(pdf|doc|docx|ppt|xls|xlsx|pptx)$)`
      )
    ),
  }),
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const updateManyLenderPlacement = {
  body: Joi.object().keys({
    lenderPlacementIds: Joi.array().items(Joi.objectId()).required(),
    // todo : add the validation for below field as per requirements
    update: Joi.object().keys({
      isFavourite: Joi.boolean(),
      isArchived: Joi.boolean(),
    }),
  }),
};

export const getLenderPlacementById = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const deleteLenderPlacementById = {
  params: Joi.object().keys({
    lenderPlacementId: Joi.objectId().required(),
  }),
};

export const getLenderPlacement = {
  body: Joi.object().keys({}).unknown(true),
};

export const paginatedLenderPlacement = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object()
    .keys({
      page: Joi.number().default(1),
      limit: Joi.number().default(10).max(100),
    })
    .unknown(true),
};

export const sendDeal = {
  body: Joi.object().keys({
    deals: Joi.array().items(
      Joi.object().keys({
        lenderInstitute: Joi.objectId().required(),
        deal: Joi.objectId().required(),
        lenderPlacement: Joi.objectId().required(),
      })
    ),
  }),
};
