/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import Joi from 'joi';
import enumFields from 'models/enum.model';

Joi.objectId = require('joi-objectid')(Joi);

const PhotosSchema = Joi.object().keys({
  url: Joi.string().required(),
  fileName: Joi.string().required(),
});
export const createLendingInstitution = {
  body: Joi.object().keys({
    lenderNameVisible: Joi.string().required(),
    lenderNameInternal: Joi.string(),
    lenderType: Joi.string()
      .valid(...Object.values(enumFields.EnumLenderTypeOfLendingInstitution))
      .required(),
    logo: PhotosSchema,
    headquarter: Joi.string(),
    website: Joi.string(),
  }),
};

export const updateLendingInstitution = {
  body: Joi.object().keys({
    lenderNameVisible: Joi.string(),
    lenderNameInternal: Joi.string(),
    lenderType: Joi.string().valid(...Object.values(enumFields.EnumLenderTypeOfLendingInstitution)),
    lenderPrograms: Joi.array().items(Joi.objectId()),
    contacts: Joi.objectId(),
    logo: PhotosSchema,
    headquarter: Joi.string(),
    website: Joi.string(),
    description: Joi.string(),
  }),
  params: Joi.object().keys({
    lendingInstitutionId: Joi.objectId().required(),
  }),
};

export const getLendingInstitutionById = {
  params: Joi.object().keys({
    lendingInstitutionId: Joi.objectId().required(),
  }),
};

export const getLendingInstitutionFeedBack = {
  params: Joi.object().keys({
    lendingInstitutionId: Joi.objectId().required(),
  }),
};

export const deleteLendingInstitutionById = {
  params: Joi.object().keys({
    lendingInstitutionId: Joi.objectId().required(),
  }),
};

export const getLendingInstitution = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object()
    .keys({
      page: Joi.string(),
      limit: Joi.string(),
      sort: Joi.string(),
      search: Joi.string(),
    })
    .unknown(true),
};

export const paginatedLendingInstitution = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object()
    .keys({
      page: Joi.number().default(1),
      limit: Joi.number().default(10).max(100),
      loanType: Joi.string(),
      propertyType: Joi.string(),
      statesArray: Joi.string(),
      lenderInstitute: Joi.string(),
      loanSize: Joi.number(),
      lenderType: Joi.string(),
      lenderNameVisible: Joi.string(),
      sort: Joi.string().valid(
        'loanType',
        'propertyType',
        'statesArray',
        'lenderInstitute',
        'loanSize',
        'lenderType',
        'lenderNameVisible'
      ),
    })
    .unknown(true),
};
