/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * If you want to add the new fields to your schema then go to the app.appinvento.io,
 * select your project then select model and click on + icon to add new fields.
 * For more checkout the docs at "docs.appinvento.io/product-guides/create-a-new-collection-field"
 */
import mongoose, { Schema } from 'mongoose';
import mongoosePaginateV2 from 'mongoose-paginate-v2';
import { toJSON, softDelete } from './plugins';
import enumModel from './enum.model';

const PhotosSchema = new mongoose.Schema({
  url: {
    type: String,
  },
  fileName: {
    type: String,
  },
});
const DealSummarySchema = new mongoose.Schema(
  {
    /**
     * created By
     * */
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    /**
     * updated By
     * */
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    propertySummary: [
      {
        key: {
          type: String,
        },
        value: {
          type: Schema.Types.Mixed,
        },
        type: {
          type: String,
          enum: Object.values(enumModel.EnumOfTypeOfValue),
        },
      },
    ],
    dealMetrics: [
      {
        key: {
          type: String,
        },
        value: {
          type: Schema.Types.Mixed,
        },
        type: {
          type: String,
          enum: Object.values(enumModel.EnumOfTypeOfValue),
        },
      },
    ],
    financingRequest: [
      {
        key: {
          type: String,
        },
        value: {
          type: Schema.Types.Mixed,
        },
        type: {
          type: String,
          enum: Object.values(enumModel.EnumOfTypeOfValue),
        },
      },
    ],
    sourcesAndUses: {
      sources: [
        {
          key: {
            type: String,
          },
          value: {
            type: String,
          },
          type: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
        },
      ],
      uses: [
        {
          key: {
            type: String,
          },
          value: {
            type: String,
          },
          type: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
        },
      ],
    },
    rentRollSummary: [
      [
        {
          key: {
            type: String,
          },
          value: {
            type: Schema.Types.Mixed,
          },
          type: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
        },
      ],
    ],
    financialSummary: {
      revenue: [
        {
          key: String,
          stabilizedValue: String,
          inPlaceValue: String,
          stabilizedType: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
          inPlaceType: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
        },
      ],
      expenses: [
        {
          key: String,
          stabilizedValue: String,
          inPlaceValue: String,
          stabilizedType: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
          inPlaceType: {
            type: String,
            enum: Object.values(enumModel.EnumOfTypeOfValue),
          },
        },
      ],
      netOperatingIncome: {
        stabilizedValue: String,
        inPlaceValue: String,
      },
    },
    deal: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Deal',
      required: true,
    },
    url: {
      type: String,
    },
    executiveSummary: {
      type: String,
    },
    dealHighLights: {
      type: [String],
    },
    marketSummary: {
      type: String,
    },
    sponserOverview: {
      type: String,
    },
    mainPhoto: {
      type: PhotosSchema,
    },
    otherPhotos: {
      type: [PhotosSchema],
    },
    // map has two fields : lat=latitude, lng=longitude
    map: {
      lat: {
        type: Number,
      },
      lng: {
        type: Number,
      },
    },
    documents: {
      type: [PhotosSchema],
    },
    // TODO : Need to implement this for custom Field
    // dynamicField: [
    //   {
    //     name: String,
    //     type: {
    //       type: String,
    //       enum: Object.values(enumModel.EnumOfDynamicFieldType),
    //     },
    //     options: [
    //       {
    //         name: String,
    //         value: Schema.Types.Mixed,
    //       },
    //     ],
    //   },
    // ],
    // dynamicResponseField: [
    //   {
    //     dynamicFieldId: mongoose.Schema.Types.ObjectId,
    //     response: Schema.Types.Mixed,
    //   },
    // ],
  },
  { timestamps: { createdAt: true, updatedAt: true }, autoCreate: true }
);

DealSummarySchema.plugin(toJSON);
DealSummarySchema.plugin(mongoosePaginateV2);
DealSummarySchema.plugin(softDelete, {
  isSoftDeleteAddon: true,
  overrideMethods: 'all',
  deleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt',
});
const DealSummaryModel = mongoose.models.DealSummary || mongoose.model('DealSummary', DealSummarySchema, 'DealSummary');
module.exports = DealSummaryModel;
