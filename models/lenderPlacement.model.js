/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * If you want to add the new fields to your schema then go to the app.appinvento.io,
 * select your project then select model and click on + icon to add new fields.
 * For more checkout the docs at "docs.appinvento.io/product-guides/create-a-new-collection-field"
 */
import mongoose from 'mongoose';
import mongoosePaginateV2 from 'mongoose-paginate-v2';
import enumModel from 'models/enum.model';
import { toJSON, softDelete } from './plugins';
/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 */
const TermsSchema = new mongoose.Schema({
  initialFunding: {
    type: Number,
    required: true,
  },
  futureFunding: {
    type: Number,
  },
  totalLoanAmount: {
    type: Number,
  },
  interestRateType: {
    type: String,
    enum: Object.values(enumModel.EnumInterestRateTypeOfTerms),
    default: 'fixedRate',
  },
  interestRateIndexValue: {
    type: String,
  },
  interestRateIndexDate: {
    type: Date,
  },
  spread: {
    type: Number,
  },
  totalRate: {
    type: String,
  },
  rateNotes: {
    type: String,
  },
  initialTerm: {
    type: String,
  },
  extensionOptionOne: {
    type: String,
  },
  extensionFee: {
    type: String,
  },
  interestRateIndex: {
    type: String,
  },
  extensionOptionTwo: {
    type: String,
  },
  LTC: {
    type: String,
  },
});
const LenderPlacementSchema = new mongoose.Schema(
  {
    /**
     * created By
     * */
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    /**
     * updated By
     * */
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    /**
     * ObjectId of Lending institution from LendingInstitution collection
     * */
    lendingInstitution: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'LendingInstitution',
      required: true,
    },
    /**
     * ObjectId of the currently selected lender from the LenderContact collection
     * */
    lenderContact: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'LenderContact',
      required: true,
    },
    /**
     * The stage of lender
     * */
    stage: {
      type: String,
      enum: Object.values(enumModel.EnumStageOfLenderPlacement),
      required: true,
      default: enumModel.EnumStageOfLenderPlacement.NEW,
    },
    /**
     * The set of terms that the lender is offering on the deal
     * */
    terms: {
      type: TermsSchema,
    },
    /**
     * An official document that has the final terms; will be uploaded by advisor to lenderPlacement
     * */
    termSheet: {
      type: String,
    },
  },
  { timestamps: { createdAt: true, updatedAt: true }, autoCreate: true }
);

LenderPlacementSchema.virtual('notes', {
  ref: 'LenderNotes',
  localField: 'lendingInstitution',
  foreignField: 'lenderInstitute',
  justOne: false,
});

LenderPlacementSchema.plugin(toJSON);
LenderPlacementSchema.plugin(mongoosePaginateV2);
LenderPlacementSchema.plugin(softDelete, {
  isSoftDeleteAddon: true,
  overrideMethods: 'all',
  deleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt',
});
const LenderPlacementModel =
  mongoose.models.LenderPlacement || mongoose.model('LenderPlacement', LenderPlacementSchema, 'LenderPlacement');
module.exports = LenderPlacementModel;
