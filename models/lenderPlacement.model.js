/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * If you want to add the new fields to your schema then go to the app.appinvento.io,
 * select your project then select model and click on + icon to add new fields.
 * For more checkout the docs at "docs.appinvento.io/product-guides/create-a-new-collection-field"
 */
import mongoose from 'mongoose';
import mongoosePaginateV2 from 'mongoose-paginate-v2';
import enumModel from 'models/enum.model';
import { toJSON, softDelete } from './plugins';

const ExtensionsShema = new mongoose.Schema({
  extensionOption: {
    value: Number,
    extensionTime: {
      type: String,
      enum: Object.values(enumModel.EnumofExtension),
    },
  },
  extensionFee: {
    type: String,
  },
});
/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 */
const TermsSchema = new mongoose.Schema({
  initialFunding: {
    type: Number,
    required: true,
  },
  futureFunding: {
    type: Number,
  },
  totalLoanAmount: {
    type: Number,
  },
  interestRateType: {
    type: String,
    enum: Object.values(enumModel.EnumInterestRateTypeOfTerms),
    default: enumModel.EnumInterestRateTypeOfTerms.FIXED_INDEX,
  },
  interestRateIndexValue: {
    type: String,
  },
  interestRateIndexDate: {
    type: Date,
  },
  spread: {
    type: String,
  },
  totalRate: {
    type: String,
  },
  rateNotes: {
    type: String,
  },
  initialTerm: {
    value: Number,
    extensionTime: {
      type: String,
      enum: Object.values(enumModel.EnumofExtension),
    },
  },
  extensions: {
    type: [ExtensionsShema],
  },
  interestRateIndex: {
    type: String,
  },
  LTC: {
    type: String,
  },
  termNotes: {
    type: String,
  },
  prePaymentPeriod: {
    value: Number,
    extensionTime: {
      type: String,
      enum: Object.values(enumModel.EnumofExtension),
    },
  },
  prePaymentType: {
    type: String,
    enum: Object.values(enumModel.EnumPrePaymentTypeOfTerms),
  },
  penaltySchedule: {
    type: String,
  },
  stabilizedDSCR: {
    type: String,
  },
  IO: {
    value: Number,
    extensionTime: {
      type: String,
      enum: Object.values(enumModel.EnumofExtension),
    },
  },
  amortization: {
    value: Number,
    extensionTime: {
      type: String,
      enum: Object.values(enumModel.EnumofExtension),
    },
  },
  originationFee: {
    type: String,
  },
  exitFee: {
    type: String,
  },
  recourse: {
    type: String,
    enum: Object.values(enumModel.EnumOfRecourse),
  },
  asIsLTV: {
    type: String,
  },
  stabilizedLTV: {
    type: String,
  },
  asIsDY: {
    type: String,
  },
  stabilizedDY: {
    type: String,
  },
  asIsDSCR: {
    type: String,
  },
  generalNotes: {
    type: String,
  },
});
const TermSheetSchema = new mongoose.Schema({
  url: {
    type: String,
  },
  fileName: {
    type: String,
  },
});
const LenderPlacementSchema = new mongoose.Schema(
  {
    /**
     * created By
     * */
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    /**
     * updated By
     * */
    updatedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    /**
     * ObjectId of Lending institution from LendingInstitution collection
     * */
    lendingInstitution: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'LendingInstitution',
      required: true,
    },
    /**
     * ObjectId of Lending institution from lenderContact collection
     * */
    lenderContact: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'LenderContact',
    },
    /**
     * ObjectId of the currently selected lender from the LenderProgram collection
     * */
    lenderProgram: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'LenderProgram',
    },
    deal: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Deal',
    },
    /**
     * The stage of lender
     * */
    stage: {
      type: String,
      enum: Object.values(enumModel.EnumStageOfLenderPlacement),
      required: true,
      default: enumModel.EnumStageOfLenderPlacement.NEW,
    },
    stageEnumWiseNumber: {
      type: Number,
      min: 0,
      max: enumModel.EnumStageOfLenderPlacement.length,
      default: 7,
    },
    /**
     * The set of terms that the lender is offering on the deal
     * */
    terms: {
      type: TermsSchema,
    },
    /**
     * An official document that has the final terms; will be uploaded by advisor to lenderPlacement
     * */
    termSheet: {
      type: TermSheetSchema,
    },
    isEmailSent: {
      type: String,
      enum: Object.values(enumModel.EnumOfEmailStatus),
      default: enumModel.EnumOfEmailStatus.SEND_DEAL,
    },
    followOnDate: {
      type: Date,
    },
    isEmailSentFirstTime: {
      type: Boolean,
      default: false,
    },
    postmarkMessageId: {
      type: [String],
    },
    isFavourite: {
      type: Boolean,
      default: false,
    },
    isArchived: {
      type: Boolean,
      default: false,
    },
  },
  { timestamps: { createdAt: true, updatedAt: true }, autoCreate: true, toJSON: { virtuals: true } }
);

LenderPlacementSchema.virtual('notes', {
  ref: 'LenderNotes',
  localField: '_id',
  foreignField: 'lenderPlacement',
  justOne: false,
  options: {
    match: { NotesType: enumModel.EnumOfNotesTypeOfLenderNotes.EXTERNAL_NOTE },
  },
});

LenderPlacementSchema.virtual('internalNotes', {
  ref: 'LenderNotes',
  localField: '_id',
  foreignField: 'lenderPlacement',
  justOne: false,
  options: {
    match: { NotesType: enumModel.EnumOfNotesTypeOfLenderNotes.INTERNAL_NOTE },
  },
});

LenderPlacementSchema.virtual('lenderAllContacts', {
  ref: 'LenderContact',
  localField: 'lendingInstitution',
  foreignField: 'lenderInstitute',
  justOne: false,
});

LenderPlacementSchema.virtual('outstandingTaskCount', {
  ref: 'Task',
  localField: 'lendingInstitution',
  foreignField: 'askingPartyInstitute',
  count: true,
  match: {
    $expr: {
      $or: [
        { $eq: ['$taskAnswer', []] }, // Check if taskAnswer is an empty array
        { $not: { $isArray: '$taskAnswer' } }, // Check if taskAnswer is not an array or non-existent
      ],
    },
  },
});
// Define the toJSON transform method for the LenderPlacementSchema options object
LenderPlacementSchema.options.toJSON.transform = function (doc, { followOnDate, ...ret }) {
  // Check if followOnDate exists
  if (followOnDate) {
    // Get the timestamp of the followOnDate field
    const followOnDateTimestamp = followOnDate.getTime();
    // Check if the followOnDate timestamp is less than the current timestamp
    if (followOnDateTimestamp < Date.now()) {
      // Set the isEmailSent property of the ret object to 'follow up'
      // and the followOnDate property to the followOnDateTimestamp
      // eslint-disable-next-line no-param-reassign
      ret = { ...ret, isEmailSent: enumModel.EnumOfEmailStatus.FOLLOW_UP, followOnDate: followOnDateTimestamp };
    }
  }
  // Return the ret object
  return ret;
};

LenderPlacementSchema.plugin(toJSON);
LenderPlacementSchema.plugin(mongoosePaginateV2);
LenderPlacementSchema.plugin(softDelete, {
  isSoftDeleteAddon: true,
  overrideMethods: 'all',
  deleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt',
});
const LenderPlacementModel =
  mongoose.models.LenderPlacement || mongoose.model('LenderPlacement', LenderPlacementSchema, 'LenderPlacement');
module.exports = LenderPlacementModel;
