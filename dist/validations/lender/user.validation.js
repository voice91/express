/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import Joi from 'joi';
import enumFields from "../../models/enum.model";
Joi.objectId = require('joi-objectid')(Joi);
const codesEmbed = Joi.object().keys({
  code: Joi.string(),
  expirationDate: Joi.date(),
  used: Joi.bool(),
  codeType: Joi.string().valid(...Object.values(enumFields.EnumCodeTypeOfCode))
});
const googleProviderEmbed = Joi.object().keys({
  id: Joi.string(),
  token: Joi.string()
});
export const createUser = {
  body: Joi.object().keys({
    name: Joi.string(),
    email: Joi.string().email(),
    role: Joi.string().valid(...Object.values(enumFields.EnumRoleOfUser)),
    codes: Joi.array().items(codesEmbed),
    password: Joi.string(),
    googleProvider: googleProviderEmbed,
    firstName: Joi.string().required(),
    lastName: Joi.string().required(),
    phoneNumber: Joi.string(),
    company: Joi.string(),
    lastSignIn: Joi.date()
  })
};
export const updateUser = {
  body: Joi.object().keys({
    name: Joi.string(),
    googleProvider: googleProviderEmbed,
    firstName: Joi.string().required(),
    lastName: Joi.string().required(),
    phoneNumber: Joi.string().allow(null),
    company: Joi.string(),
    lastSignIn: Joi.date(),
    profilePhoto: Joi.string(),
    companyName: Joi.string().required(),
    companyAddress: Joi.string().allow(null),
    city: Joi.string().allow(null),
    state: Joi.string().allow(null),
    zipcode: Joi.number().integer().min(100).max(999999).allow(null)
  })
};
export const getUserById = {
  params: Joi.object().keys({
    userId: Joi.objectId().required()
  })
};
export const deleteUserById = {
  params: Joi.object().keys({
    userId: Joi.objectId().required()
  })
};
export const getUser = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object().keys({
    page: Joi.string(),
    limit: Joi.string(),
    sort: Joi.string(),
    search: Joi.string()
  }).unknown(true)
};
export const paginatedUser = {
  body: Joi.object().keys({}).unknown(true),
  query: Joi.object().keys({
    page: Joi.number().default(1),
    limit: Joi.number().default(10).max(100)
  }).unknown(true)
};