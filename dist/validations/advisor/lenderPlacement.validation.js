"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateManyLenderPlacement = exports.updateLenderPlacement = exports.updateAndSaveInitialEmailContent = exports.sendMessage = exports.sendEmailV3 = exports.sendEmail = exports.sendDealV2 = exports.sendDeal = exports.removeLenderPlacement = exports.removeDocument = exports.paginatedLenderPlacement = exports.getMessages = exports.getLenderPlacementById = exports.getLenderPlacement = exports.getEmailTemplatesByLanderPlacementId = exports.getEmailTemplateId = exports.getEmailDataV3 = exports.deleteLenderPlacementById = exports.createLenderPlacement = void 0;
var _joi = _interopRequireDefault(require("joi"));
var _enum = _interopRequireDefault(require("../../models/enum.model"));
var _Joi$string, _Joi$string2, _Joi$string3, _Joi$string4, _Joi$string5, _Joi$string6, _Joi$string7, _Joi$string8;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
_joi["default"].objectId = require('joi-objectid')(_joi["default"]);
var extensionsSchema = _joi["default"].object().keys({
  extensionOption: _joi["default"].object().keys({
    value: _joi["default"].number(),
    extensionTime: (_Joi$string = _joi["default"].string()).valid.apply(_Joi$string, _toConsumableArray(Object.values(_enum["default"].EnumofExtension)))
  }),
  extensionFee: _joi["default"].string()
});
var documentSchema = _joi["default"].object().keys({
  url: _joi["default"].string().required(),
  fileName: _joi["default"].string().required(),
  fileType: _joi["default"].string()
});

// dynamic field schema for repetitive code in embedded terms schema
var termsDynamicFieldSchema = _joi["default"].object().keys({
  value: _joi["default"].number(),
  extensionTime: (_Joi$string2 = _joi["default"].string()).valid.apply(_Joi$string2, _toConsumableArray(Object.values(_enum["default"].EnumofExtension)))
});
var termsEmbed = _joi["default"].object().keys({
  initialFunding: _joi["default"].number().integer().required(),
  futureFunding: _joi["default"].number().integer(),
  totalLoanAmount: _joi["default"].number().integer(),
  interestRateType: (_Joi$string3 = _joi["default"].string()).valid.apply(_Joi$string3, _toConsumableArray(Object.values(_enum["default"].EnumInterestRateTypeOfTerms))),
  interestRateIndexValue: _joi["default"].string(),
  interestRateIndexDate: _joi["default"].date(),
  spread: _joi["default"].string(),
  totalRate: _joi["default"].string(),
  rateNotes: _joi["default"].string(),
  initialTerm: termsDynamicFieldSchema,
  interestRateIndex: _joi["default"].string(),
  extensions: _joi["default"].array().items(extensionsSchema),
  LTC: _joi["default"].string(),
  termNotes: _joi["default"].string(),
  prePaymentPeriod: termsDynamicFieldSchema,
  IO: termsDynamicFieldSchema,
  amortization: termsDynamicFieldSchema,
  originationFee: _joi["default"].string(),
  exitFee: _joi["default"].string(),
  recourse: (_Joi$string4 = _joi["default"].string()).valid.apply(_Joi$string4, _toConsumableArray(Object.values(_enum["default"].EnumOfRecourse))),
  asIsLTV: _joi["default"].string(),
  stabilizedLTV: _joi["default"].string(),
  asIsDY: _joi["default"].string(),
  stabilizedDY: _joi["default"].string(),
  asIsDSCR: _joi["default"].string(),
  generalNotes: _joi["default"].string(),
  prePaymentType: (_Joi$string5 = _joi["default"].string()).valid.apply(_Joi$string5, _toConsumableArray(Object.values(_enum["default"].EnumPrePaymentTypeOfTerms))),
  stabilizedDSCR: _joi["default"].string(),
  penaltySchedule: _joi["default"].string()
});
var TermSheetSchema = _joi["default"].object().keys({
  url: _joi["default"].string(),
  fileName: _joi["default"].string()
});
var createLenderPlacement = exports.createLenderPlacement = {
  body: _joi["default"].object().keys({
    lendingDetails: _joi["default"].array().items(_joi["default"].object().keys({
      lendingInstitution: _joi["default"].objectId().required(),
      deal: _joi["default"].objectId().required()
    }).required()).required(),
    lenderContact: _joi["default"].objectId(),
    notes: _joi["default"].array().items(_joi["default"].string()),
    stage: (_Joi$string6 = _joi["default"].string()).valid.apply(_Joi$string6, _toConsumableArray(Object.values(_enum["default"].EnumStageOfLenderPlacement))),
    terms: termsEmbed,
    termSheet: TermSheetSchema,
    isEmailSent: (_Joi$string7 = _joi["default"].string()).valid.apply(_Joi$string7, _toConsumableArray(Object.values(_enum["default"].EnumOfEmailStatus))),
    followOnDate: _joi["default"].date(),
    postmarkMessageId: _joi["default"].array().items(_joi["default"].string())
  })
};
var updateLenderPlacement = exports.updateLenderPlacement = {
  body: _joi["default"].object().keys({
    lendingInstitution: _joi["default"].objectId(),
    lenderContact: _joi["default"].objectId(),
    nextStep: _joi["default"].string(),
    notes: _joi["default"].array().items(_joi["default"].string()),
    stage: (_Joi$string8 = _joi["default"].string()).valid.apply(_Joi$string8, _toConsumableArray(Object.values(_enum["default"].EnumStageOfLenderPlacement))),
    terms: termsEmbed,
    termSheet: TermSheetSchema,
    orderOfTerms: _joi["default"].number().integer()
  }),
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required()
  })
};
var getLenderPlacementById = exports.getLenderPlacementById = {
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required()
  })
};
var deleteLenderPlacementById = exports.deleteLenderPlacementById = {
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required()
  })
};
var getLenderPlacement = exports.getLenderPlacement = {
  body: _joi["default"].object().keys({}).unknown(true),
  query: _joi["default"].object().keys({
    outstandingTask: _joi["default"]["boolean"]()
  }).unknown(true)
};
var updateManyLenderPlacement = exports.updateManyLenderPlacement = {
  body: _joi["default"].object().keys({
    lenderPlacementIds: _joi["default"].array().items(_joi["default"].objectId()).required(),
    update: _joi["default"].object().keys({
      isFavourite: _joi["default"]["boolean"](),
      isArchived: _joi["default"]["boolean"]()
    })
  })
};
var removeLenderPlacement = exports.removeLenderPlacement = {
  query: _joi["default"].object().keys({
    lendingInstitution: _joi["default"].objectId().required(),
    deal: _joi["default"].objectId().required()
  })
};
var paginatedLenderPlacement = exports.paginatedLenderPlacement = {
  body: _joi["default"].object().keys({}).unknown(true),
  query: _joi["default"].object().keys({
    page: _joi["default"].number()["default"](1),
    limit: _joi["default"].number()["default"](10).max(100)
  }).unknown(true)
};
var sendDeal = exports.sendDeal = {
  body: _joi["default"].object().keys({
    lenderInstitute: _joi["default"].array().items(_joi["default"].objectId()).required(),
    deal: _joi["default"].objectId().required(),
    lenderPlacement: _joi["default"].objectId().required()
  })
};
var sendDealV2 = exports.sendDealV2 = {
  body: _joi["default"].object().keys({
    deals: _joi["default"].array().items(_joi["default"].object().keys({
      lenderInstitute: _joi["default"].objectId().required(),
      lender: _joi["default"].objectId().required(),
      deal: _joi["default"].objectId().required(),
      lenderPlacement: _joi["default"].objectId().required(),
      followUpContent: _joi["default"].string()
    }))
  }),
  query: _joi["default"].object().keys({
    isFollowUp: _joi["default"]["boolean"]()
  })
};
var getEmailTemplateId = exports.getEmailTemplateId = {
  params: _joi["default"].object().keys({
    emailTemplateId: _joi["default"].objectId().required()
  })
};
var sendEmail = exports.sendEmail = {
  params: _joi["default"].object().keys({
    emailTemplateId: _joi["default"].objectId().required()
  }),
  body: _joi["default"].object().keys({
    getEmailTemplate: _joi["default"].object().keys({
      from: _joi["default"].string().email(),
      contact: _joi["default"].array().items(_joi["default"].object().keys({
        sendTo: _joi["default"].string().email(),
        name: _joi["default"].string()
      })),
      sendTo: _joi["default"].array().items(_joi["default"].string().email()),
      name: _joi["default"].string(),
      ccList: _joi["default"].array().items(_joi["default"].string().email()),
      bccList: _joi["default"].array().items(_joi["default"].string().email()),
      subject: _joi["default"].string(),
      dealDocument: _joi["default"].array().items(_joi["default"].objectId()),
      lenderPlacement: _joi["default"].objectId(),
      emailContent: _joi["default"].string(),
      deal: _joi["default"].objectId(),
      emailAttachments: _joi["default"].array().items(_joi["default"].object()),
      totalLoanAmount: _joi["default"].number(),
      templateName: _joi["default"].string(),
      advisorName: _joi["default"].string()
    }),
    sendToAdvisor: _joi["default"]["boolean"]()
  })
};

/**
 * take lenderPlacementId in query bcs we have to send multiple deal & we can not take array in the path params
 * @type {{query: ObjectSchema}}
 */
var getEmailDataV3 = exports.getEmailDataV3 = {
  query: _joi["default"].object().keys({
    // this will make sure we get minimum one id in this
    lenderPlacementId: _joi["default"].array().items(_joi["default"].objectId()).min(1).single().required()
  })
};
var sendEmailV3 = exports.sendEmailV3 = {
  body: _joi["default"].object().keys({
    subject: _joi["default"].string().when('isFollowUp', {
      is: true,
      then: _joi["default"].forbidden(),
      otherwise: _joi["default"].required()
    }),
    ccList: _joi["default"].array().items(_joi["default"].string().email()),
    // send to all lenders which we get in this
    lenderPlacementIds: _joi["default"].array().items(_joi["default"].objectId()).min(1).required(),
    emailContent: _joi["default"].string().when('isFollowUp', {
      is: true,
      then: _joi["default"].forbidden(),
      otherwise: _joi["default"].required()
    }),
    deal: _joi["default"].objectId().required(),
    emailAttachments: _joi["default"].array().items(_joi["default"].object()),
    sendToAdvisor: _joi["default"]["boolean"](),
    isFollowUp: _joi["default"]["boolean"]()["default"](false),
    followUpContent: _joi["default"].string().when('isFollowUp', {
      is: true,
      then: _joi["default"].required(),
      otherwise: _joi["default"].forbidden()
    })
  })
};
var getEmailTemplatesByLanderPlacementId = exports.getEmailTemplatesByLanderPlacementId = {
  params: _joi["default"].object().keys({
    lenderPlacement: _joi["default"].objectId().required()
  })
};
var sendMessage = exports.sendMessage = {
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required()
  }),
  body: _joi["default"].object().keys({
    message: _joi["default"].string(),
    documents: _joi["default"].array().items(documentSchema),
    to: _joi["default"].array().items(_joi["default"].string().email()),
    cc: _joi["default"].array().items(_joi["default"].string().email())
  })
};
var getMessages = exports.getMessages = {
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required()
  })
};
var removeDocument = exports.removeDocument = {
  params: _joi["default"].object().keys({
    lenderPlacementId: _joi["default"].objectId().required(),
    documentId: _joi["default"].objectId().required()
  })
};
var updateAndSaveInitialEmailContent = exports.updateAndSaveInitialEmailContent = {
  params: _joi["default"].object().keys({
    emailTemplateId: _joi["default"].objectId().required()
  }),
  body: _joi["default"].object().keys({
    from: _joi["default"].string().email(),
    contact: _joi["default"].array().items(_joi["default"].object().keys({
      sendTo: _joi["default"].string().email(),
      name: _joi["default"].string()
    })),
    sendTo: _joi["default"].array().items(_joi["default"].string().email()),
    name: _joi["default"].string(),
    ccList: _joi["default"].array().items(_joi["default"].string().email()),
    bccList: _joi["default"].array().items(_joi["default"].string().email()),
    subject: _joi["default"].string(),
    dealDocument: _joi["default"].array().items(_joi["default"].objectId()),
    lenderPlacement: _joi["default"].objectId(),
    emailContent: _joi["default"].string(),
    deal: _joi["default"].objectId(),
    emailAttachments: _joi["default"].array().items(_joi["default"].object()),
    totalLoanAmount: _joi["default"].number(),
    templateName: _joi["default"].string(),
    advisorName: _joi["default"].string()
  })
};