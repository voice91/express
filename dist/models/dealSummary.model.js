"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _mongoose = _interopRequireWildcard(require("mongoose"));
var _mongoosePaginateV = _interopRequireDefault(require("mongoose-paginate-v2"));
var _plugins = require("./plugins");
var _enum = _interopRequireDefault(require("./enum.model"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * If you want to add the new fields to your schema then go to the app.appinvento.io,
 * select your project then select model and click on + icon to add new fields.
 * For more checkout the docs at "docs.appinvento.io/product-guides/create-a-new-collection-field"
 */

var PhotosSchema = new _mongoose["default"].Schema({
  url: {
    type: String
  },
  fileName: {
    type: String
  }
});

// heading schema as in the heading we need dealName, city, state, info: asset type, loan type, loan amount etc.
var headingSchema = new _mongoose["default"].Schema({
  dealName: {
    type: String
  },
  cityState: {
    type: String
  },
  dealInfo: {
    type: String
  }
});

/**
 * The 'key' field represents the name or identifier of the dynamic field.
 * The 'value' field can store data of any type (Mixed) since it's dynamic.
 * The 'type' field specifies the type of the 'value' field.
 */
var dynamicFieldSchema = new _mongoose["default"].Schema({
  key: {
    type: String
  },
  value: {
    type: _mongoose.Schema.Types.Mixed
  },
  type: {
    type: String,
    "enum": Object.values(_enum["default"].EnumOfTypeOfValue)
  }
});
var DealSummarySchema = new _mongoose["default"].Schema({
  /**
   * created By
   * */
  createdBy: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'User'
  },
  /**
   * updated By
   * */
  updatedBy: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'User'
  },
  propertySummary: [dynamicFieldSchema],
  dealMetrics: [dynamicFieldSchema],
  financingRequest: [dynamicFieldSchema],
  sourcesAndUses: {
    sources: [dynamicFieldSchema],
    uses: [dynamicFieldSchema]
  },
  rentRollSummary: [[dynamicFieldSchema]],
  financialSummary: {
    revenue: [{
      key: String,
      stabilizedValue: String,
      inPlaceValue: String,
      stabilizedType: {
        type: String,
        "enum": Object.values(_enum["default"].EnumOfTypeOfValue)
      },
      inPlaceType: {
        type: String,
        "enum": Object.values(_enum["default"].EnumOfTypeOfValue)
      },
      // To store note for particular revenue field
      note: String
    }],
    expenses: [{
      key: String,
      stabilizedValue: String,
      inPlaceValue: String,
      stabilizedType: {
        type: String,
        "enum": Object.values(_enum["default"].EnumOfTypeOfValue)
      },
      inPlaceType: {
        type: String,
        "enum": Object.values(_enum["default"].EnumOfTypeOfValue)
      },
      // To store note for particular expenses field
      note: String
    }],
    netOperatingIncome: {
      stabilizedValue: String,
      inPlaceValue: String
    }
  },
  deal: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'Deal',
    required: true
  },
  url: {
    type: String
  },
  executiveSummary: {
    type: String
  },
  dealHighLights: {
    type: [String]
  },
  marketSummary: {
    type: String
  },
  sponsorOverview: {
    type: String
  },
  mainPhoto: {
    type: PhotosSchema
  },
  otherPhotos: {
    type: [PhotosSchema]
  },
  // map has two fields : lat=latitude, lng=longitude
  map: {
    lat: {
      type: Number
    },
    lng: {
      type: Number
    }
  },
  documents: {
    type: [PhotosSchema]
  },
  dataSheet: {
    type: PhotosSchema
  },
  dynamicField: [{
    name: String,
    type: {
      type: String,
      "enum": Object.values(_enum["default"].EnumOfDynamicFieldType)
    },
    response: {
      bulletPoints: [String],
      text: String,
      fileUrl: String,
      fileName: String,
      /*
       * The 'tableData' array is a nested array structure, used to store the data of table type dynamicFields.
       * It contains an array of arrays where each inner array represents a row of data.
       * Each row is an array of objects with three properties: 'key', 'value', and 'type'.
       * tableData is imported from the url stored in fileUrl.
       */
      tableData: [[dynamicFieldSchema]]
    },
    // 'sectionName' property is a string representing the name of the section at below dynamicField added.
    sectionName: {
      type: String,
      "enum": Object.values(_enum["default"].EnumOfSectionName)
    },
    // 'index' property is a number representing the index of the dynamic field from above section.
    // index is used to get the orders of the dynamic fields from the particular section , if same sectionName come then index will be increase by one.
    index: {
      type: Number
    }
  }],
  // this is used to indicate dealSummary is created along with deal or not.
  isDealSummaryAddedFromDeal: {
    type: Boolean,
    "default": false
  },
  // this is for the heading the presentation tab
  heading: headingSchema
}, {
  timestamps: {
    createdAt: true,
    updatedAt: true
  },
  autoCreate: true
});
DealSummarySchema.plugin(_plugins.toJSON);
DealSummarySchema.plugin(_mongoosePaginateV["default"]);
DealSummarySchema.plugin(_plugins.softDelete, {
  isSoftDeleteAddon: true,
  overrideMethods: 'all',
  deleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt'
});
var DealSummaryModel = _mongoose["default"].models.DealSummary || _mongoose["default"].model('DealSummary', DealSummarySchema, 'DealSummary');
module.exports = DealSummaryModel;