"use strict";

var _mongoose = _interopRequireDefault(require("mongoose"));
var _mongoosePaginateV = _interopRequireDefault(require("mongoose-paginate-v2"));
var _plugins = require("./plugins");
var _enum = _interopRequireDefault(require("./enum.model"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * If you want to add the new fields to your schema then go to the app.appinvento.io,
 * select your project then select model and click on + icon to add new fields.
 * For more checkout the docs at "docs.appinvento.io/product-guides/create-a-new-collection-field"
 */

var ActivityLogSchema = new _mongoose["default"].Schema({
  /**
   * created By
   * */
  createdBy: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'User'
  },
  /**
   * updated By
   * */
  updatedBy: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'User'
  },
  /**
   * ID linked to a specific deal
   * */
  deal: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'Deal',
    required: true
  },
  lender: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: 'LendingInstitution'
  },
  /**
   * There will be certain messages that the system will generate at specific times
   * */
  update: {
    type: String,
    required: true
  },
  type: {
    type: String,
    "enum": Object.values(_enum["default"].EnumOfActivityType)
  },
  /* commenting it in case we need it again in future
  user: {
    type: String,
  }, */
  isPinned: {
    type: Boolean,
    "default": false
  }
  /* commenting it in case we need it again in future
  isFlagged: {
    type: Boolean,
  }, */
}, {
  timestamps: {
    createdAt: true,
    updatedAt: true
  },
  autoCreate: true,
  toJSON: {
    virtuals: true
  }
});
// TODO: we can pass var from option in place of taking update doc
// We don't want updatedAt to be changed when we pass the field isPinned and isFlagged as we are also sorting the notes by updatedAt field
ActivityLogSchema.pre('findOneAndUpdate', function (next) {
  var update = this.getUpdate();
  // in operator is used to check if the field 'isPinned' or 'isFlagged' exist in the update object
  if ('isPinned' in update || 'isFlagged' in update) {
    delete update.$set.updatedAt;
  }
  next();
});
ActivityLogSchema.plugin(_plugins.toJSON);
ActivityLogSchema.plugin(_mongoosePaginateV["default"]);
ActivityLogSchema.plugin(_plugins.softDelete, {
  isSoftDeleteAddon: true,
  overrideMethods: 'all',
  deleted: 'isDeleted',
  deletedBy: 'deletedBy',
  deletedAt: 'deletedAt'
});
var ActivityLogModel = _mongoose["default"].models.ActivityLog || _mongoose["default"].model('ActivityLog', ActivityLogSchema, 'ActivityLog');
module.exports = ActivityLogModel;