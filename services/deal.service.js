/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import ApiError from 'utils/ApiError';
import httpStatus from 'http-status';
import { Deal, User } from 'models';

export async function getDealById(id, options = {}) {
  const deal = await Deal.findById(id, options.projection, options);
  return deal;
}

export async function getOne(query, options = {}) {
  const deal = await Deal.findOne(query, options.projection, options);
  return deal;
}

export async function getDealList(filter, options = {}) {
  const deal = await Deal.find(filter, options.projection, options);
  return deal;
}

export async function getDealListWithPagination(filter, options = {}) {
  const deal = await Deal.paginate(filter, options);
  return deal;
}

export async function createDeal(body) {
  if (body.involvedUsers && body.involvedUsers.advisors) {
    const advisor = body.involvedUsers.advisors;
    const advisors = await User.find({ _id: { $in: advisor } });
    if (advisors.length !== advisor.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'advisors not found!');
    }
  }
  if (body.involvedUsers && body.involvedUsers.lenders) {
    const lender = body.involvedUsers.lenders;
    const lenders = await User.find({ _id: { $in: lender } });
    if (lenders.length !== lender.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'lenders not found!');
    }
  }
  if (body.involvedUsers && body.involvedUsers.borrowers) {
    const borrower = body.involvedUsers.borrowers;
    const borrowers = await User.find({ _id: { $in: borrower } });
    if (borrowers.length !== borrower.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'borrowers not found!');
    }
  }
  const deal = await Deal.create(body);
  return deal;
}
export async function updateDeal(filter, body, options = {}) {
  if (body.involvedUsers && body.involvedUsers.advisors) {
    const advisor = body.involvedUsers.advisors;
    const advisors = await User.find({ _id: { $in: advisor } });
    if (advisors.length !== advisor.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'advisors not found!');
    }
  }
  if (body.involvedUsers && body.involvedUsers.lenders) {
    const lender = body.involvedUsers.lenders;
    const lenders = await User.find({ _id: { $in: lender } });
    if (lenders.length !== lender.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'lenders not found!');
    }
  }
  if (body.involvedUsers && body.involvedUsers.borrowers) {
    const borrower = body.involvedUsers.borrowers;
    const borrowers = await User.find({ _id: { $in: borrower } });
    if (borrowers.length !== borrower.length) {
      throw new ApiError(httpStatus.BAD_REQUEST, 'borrowers not found!');
    }
  }
  const deal = await Deal.findOneAndUpdate(filter, body, options);
  return deal;
}

export async function updateManyDeal(filter, body, options = {}) {
  const deal = await Deal.updateMany(filter, body, options);
  return deal;
}

export async function removeDeal(filter) {
  const deal = await Deal.findOneAndRemove(filter);
  return deal;
}

export async function removeManyDeal(filter) {
  const deal = await Deal.deleteMany(filter);
  return deal;
}
