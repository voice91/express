/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import ApiError from 'utils/ApiError';
import httpStatus from 'http-status';
import { DealNotes, Deal } from 'models';

export async function getDealNotesById(id, options = {}) {
  const dealNotes = await DealNotes.findById(id, options.projection, options);
  return dealNotes;
}

export async function getOne(query, options = {}) {
  const dealNotes = await DealNotes.findOne(query, options.projection, options);
  return dealNotes;
}

export async function getDealNotesList(filter, options = {}) {
  const dealNotes = await DealNotes.find(filter, options.projection, options);
  return dealNotes;
}

export async function getDealNotesListWithPagination(filter, options = {}) {
  const dealNotes = await DealNotes.paginate(filter, options);
  return dealNotes;
}

export async function createDealNotes(body, options = {}) {
  const deal = await Deal.findOne({ _id: body.deal });
  if (!deal) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field deal is not valid');
  }
  const dealNotes = await DealNotes.create(body);
  return dealNotes;
}

export async function updateDealNotes(filter, body, options = {}) {
  const deal = await Deal.findOne({ _id: body.deal });
  if (!deal) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field deal is not valid');
  }
  const dealNotes = await DealNotes.findOneAndUpdate(filter, body, options);
  return dealNotes;
}

export async function updateManyDealNotes(filter, body, options = {}) {
  const dealNotes = await DealNotes.updateMany(filter, body, options);
  return dealNotes;
}

export async function removeDealNotes(filter) {
  const dealNotes = await DealNotes.findOneAndRemove(filter);
  return dealNotes;
}

export async function removeManyDealNotes(filter) {
  const dealNotes = await DealNotes.deleteMany(filter);
  return dealNotes;
}
