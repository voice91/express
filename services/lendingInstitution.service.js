/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import ApiError from 'utils/ApiError';
import httpStatus from 'http-status';
import { LendingInstitution, LenderProgram, LenderContact } from 'models';

export async function getLendingInstitutionById(id, options = {}) {
  const lendingInstitution = await LendingInstitution.findById(id, options.projection, options);
  return lendingInstitution;
}

export async function getOne(query, options = {}) {
  const lendingInstitution = await LendingInstitution.findOne(query, options.projection, options);
  return lendingInstitution;
}

export async function getLendingInstitutionList(filter, options = {}) {
  const lendingInstitution = await LendingInstitution.find(filter, options.projection, options);
  return lendingInstitution;
}

export async function getLendingInstitutionListWithPagination(filter, options = {}) {
  const lendingInstitution = await LendingInstitution.paginate(filter, options);
  return lendingInstitution;
}

export async function createLendingInstitution(body, options = {}) {
  const lenderPrograms = await LenderProgram.find({ _id: { $in: body.lenderPrograms } });
  if (!lenderPrograms.length) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lenderPrograms is not valid');
  }
  const contacts = await LenderContact.findOne({ _id: body.contacts });
  if (!contacts) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field contacts is not valid');
  }
  const lendingInstitution = await LendingInstitution.create(body);
  return lendingInstitution;
}

export async function updateLendingInstitution(filter, body, options = {}) {
  const lenderPrograms = await LenderProgram.find({ _id: { $in: body.lenderPrograms } });
  if (!lenderPrograms.length) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lenderPrograms is not valid');
  }
  const contacts = await LenderContact.findOne({ _id: body.contacts });
  if (!contacts) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field contacts is not valid');
  }
  const lendingInstitution = await LendingInstitution.findOneAndUpdate(filter, body, options);
  return lendingInstitution;
}

export async function updateManyLendingInstitution(filter, body, options = {}) {
  const lendingInstitution = await LendingInstitution.updateMany(filter, body, options);
  return lendingInstitution;
}

export async function removeLendingInstitution(filter) {
  const lendingInstitution = await LendingInstitution.findOneAndRemove(filter);
  return lendingInstitution;
}

export async function removeManyLendingInstitution(filter) {
  const lendingInstitution = await LendingInstitution.deleteMany(filter);
  return lendingInstitution;
}
