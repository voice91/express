/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import ApiError from 'utils/ApiError';
import httpStatus from 'http-status';
import { DealDocument, LenderContact, LenderPlacement, LendingInstitution } from 'models';

export async function getLenderPlacementById(id, options = {}) {
  const lenderPlacement = await LenderPlacement.findById(id, options.projection, options).populate('lendingInstitution');
  return lenderPlacement;
}

export async function getOne(query, options = {}) {
  const lenderPlacement = await LenderPlacement.findOne(query, options.projection, options);
  return lenderPlacement;
}

export async function getLenderPlacementList(filter, options = {}) {
  const lenderPlacement = await LenderPlacement.find(filter, options.projection, options).populate([
    {
      path: 'lendingInstitution',
    },
    {
      path: 'lenderContact',
    },
  ]);
  return lenderPlacement;
}

export async function getLenderPlacementListWithPagination(filter, options = {}) {
  const lenderPlacement = await LenderPlacement.paginate(filter, options);
  return lenderPlacement;
}

export async function createLenderPlacement(body) {
  // find the lending placement that have lending institute and deal both, if exists then throwing error and deal is common for all the institute so taking value of index 0.
  const lendingPlacement = await LenderPlacement.find({
    lendingInstitution: { $in: body.map((item) => item.lendingInstitution) },
    deal: body[0].deal,
  }).populate({ path: 'lendingInstitution' }); // populating lender institute as we need lender names to display in the error.
  if (lendingPlacement.length) {
    throw new ApiError(
      httpStatus.BAD_REQUEST,
      `${lendingPlacement.map((item) => item.lendingInstitution.lenderNameVisible)} is already a part of deal`
    );
  }
  const lenderPlacement = await LenderPlacement.create(body);
  return lenderPlacement;
}

export async function updateLenderPlacement(filter, body, options = {}) {
  const lendingInstitution = await LendingInstitution.findOne({ _id: body.lendingInstitution });
  if (body.lendingInstitution && !lendingInstitution) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lendingInstitution is not valid');
  }
  const lenderPlacement = await LenderPlacement.findOneAndUpdate(filter, body, options);
  return lenderPlacement;
}

export async function updateManyLenderPlacement(filter, body, options = {}) {
  const lenderPlacement = await LenderPlacement.updateMany(filter, body, options);
  return lenderPlacement;
}

export async function removeLenderPlacement(filter) {
  const lenderPlacement = await LenderPlacement.findOneAndRemove(filter);
  return lenderPlacement;
}

export async function removeManyLenderPlacement(filter) {
  const lenderPlacement = await LenderPlacement.deleteMany(filter);
  return lenderPlacement;
}

export async function sendDeal(filterToFindContact, filterToFindPlacement, filterToFindDeal) {
  const lenderContact = await LenderContact.find(filterToFindContact).populate([
    {
      path: 'lenderInstitute',
    },
  ]);
  const lenderPlacement = await LenderPlacement.findOne(filterToFindPlacement).populate([
    {
      path: 'lendingInstitution',
    },
  ]);
  const dealDoc = await DealDocument.find(filterToFindDeal).populate([
    {
      path: 'deal',
    },
  ]);
  const docIds = await dealDoc.map((data) => data._id);

  return { lenderContact, lenderPlacement, dealDoc, docIds };
}
