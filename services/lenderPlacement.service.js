/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import ApiError from 'utils/ApiError';
import httpStatus from 'http-status';
import { DealDocument, LenderContact, LenderPlacement, LendingInstitution } from 'models';
import { dealService, lenderContactService, lenderNotesService, taskService } from './index';

export async function getLenderPlacementById(id, options = {}) {
  const lenderPlacement = await LenderPlacement.findById(id, options.projection, options).populate('lendingInstitution');
  return lenderPlacement;
}

export async function getOne(query, options = {}) {
  const lenderPlacement = await LenderPlacement.findOne(query, options.projection, options);
  return lenderPlacement;
}

export async function getLenderPlacementList(filter, options = {}) {
  const lenderPlacement = await LenderPlacement.find(filter, options.projection, options);
  return lenderPlacement;
}

export async function getLenderPlacementListWithPagination(filter, options = {}) {
  const lenderPlacement = await LenderPlacement.paginate(filter, options);
  return lenderPlacement;
}

export async function createLenderPlacement(body) {
  if (body.lendingInstitution) {
    const lenderPlacement = await LenderPlacement.findOne({
      lendingInstitution: body.lendingInstitution,
      deal: body.deal,
    });
    // finding the institutes that are added in the deal already and throwing error for it.
    if (lenderPlacement) {
      throw new ApiError(
        httpStatus.BAD_REQUEST,
        'Some lending institutes are included in the deal, making it impossible to add them back, whereas others are added.'
      );
    }
  }
  const lendingInstitution = await LendingInstitution.findOne({ _id: body.lendingInstitution });
  if (body.lendingInstitution && !lendingInstitution) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lendingInstitution is not valid');
  }
  const lenderPlacement = await LenderPlacement.create(body);
  // here updating lenderIds in the deal
  if (lenderPlacement) {
    const lenders = await lenderContactService.getLenderContactList({ lenderInstitute: body.lendingInstitution });
    await dealService.updateDeal(
      { _id: body.deal },
      { $addToSet: { 'involvedUsers.lenders': { $each: lenders.map((lender) => lender._id) } } }
    );
  }
  return lenderPlacement;
}

export async function updateLenderPlacement(filter, body, options = {}) {
  const lendingInstitution = await LendingInstitution.findOne({ _id: body.lendingInstitution });
  if (body.lendingInstitution && !lendingInstitution) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lendingInstitution is not valid');
  }
  const lenderPlacement = await LenderPlacement.findOneAndUpdate(filter, body, options);
  return lenderPlacement;
}

export async function updateManyLenderPlacement(filter, body, options = {}) {
  const lenderPlacement = await LenderPlacement.updateMany(filter, body, options);
  return lenderPlacement;
}

// common function to remove internal notes and task from the lender placement when lender is remove from the placement or when status changes from 'sent' to 'new' in placement.
export const removeLenderPlacementAssociatedThings = async (lenderPlacement) => {
  const filterForTask = {
    askingPartyInstitute: lenderPlacement.lendingInstitution,
    deal: lenderPlacement.deal,
  };

  await Promise.all([
    taskService.removeManyTask(filterForTask),
    lenderNotesService.removeManyLenderNotes({ lenderPlacement: lenderPlacement._id }),
  ]);
};

export async function removeLenderPlacement(filter) {
  const lenderPlacement = await LenderPlacement.findOneAndRemove(filter);
  if (lenderPlacement) {
    await removeLenderPlacementAssociatedThings(lenderPlacement);
    // here removing lenderIds from the deal
    const lenders = await lenderContactService.getLenderContactList({ lenderInstitute: lenderPlacement.lendingInstitution });
    await dealService.updateDeal(
      { _id: lenderPlacement.deal },
      { $pull: { 'involvedUsers.lenders': { $in: lenders.map((lender) => lender._id) } } }
    );
  }
  return lenderPlacement;
}

export async function removeManyLenderPlacement(filter) {
  const lenderPlacement = await LenderPlacement.deleteMany(filter);
  return lenderPlacement;
}

export async function sendDeal(filterToFindContact, filterToFindPlacement, filterToFindDeal) {
  const lenderContact = await LenderContact.find(filterToFindContact).populate([
    {
      path: 'lenderInstitute',
    },
  ]);
  const lenderPlacement = await LenderPlacement.findOne(filterToFindPlacement).populate([
    {
      path: 'lendingInstitution',
    },
    {
      path: 'lenderContact',
    },
    {
      path: 'deal',
      populate: {
        path: 'dealSummary',
      },
    },
  ]);
  const dealDoc = await DealDocument.find(filterToFindDeal).populate([
    {
      path: 'deal',
    },
  ]);
  const docIds = await dealDoc.map((data) => data._id);

  return { lenderContact, lenderPlacement, dealDoc, docIds };
}
