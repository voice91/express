/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import { LenderContact, LendingInstitution } from 'models';
import httpStatus from 'http-status';
import ApiError from '../utils/ApiError';

export async function getLenderContactById(id, options = {}) {
  const lenderContact = await LenderContact.findById(id, options.projection, options);
  return lenderContact;
}

export async function getOne(query, options = {}) {
  const lenderContact = await LenderContact.findOne(query, options.projection, options);
  return lenderContact;
}

export async function getLenderContactList(filter, options = {}) {
  const lenderContact = await LenderContact.find(filter, options.projection, options);
  return lenderContact;
}

export async function getLenderContactListWithPagination(filter, options = {}) {
  const lenderContact = await LenderContact.paginate(filter, options);
  return lenderContact;
}

export async function createLenderContact(body) {
  const lenderInstitute = await LendingInstitution.find({ _id: { $in: body.lenderInstitute } });
  if (!lenderInstitute.length) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'field lenderInstitute is not valid');
  }
  const lenderContact = await LenderContact.create(body);
  return lenderContact;
}

export async function updateLenderContact(filter, body, options = {}) {
  const lenderContact = await LenderContact.findOneAndUpdate(filter, body, options);
  return lenderContact;
}

export async function updateManyLenderContact(filter, body, options = {}) {
  const lenderContact = await LenderContact.updateMany(filter, body, options);
  return lenderContact;
}

export async function removeLenderContact(filter) {
  const lenderContact = await LenderContact.findOneAndRemove(filter);
  return lenderContact;
}

export async function removeManyLenderContact(filter) {
  const lenderContact = await LenderContact.deleteMany(filter);
  return lenderContact;
}
