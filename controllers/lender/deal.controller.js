/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import httpStatus from 'http-status';
import { dealService, lenderContactService, lenderPlacementService } from 'services';
import { catchAsync } from 'utils/catchAsync';
import { pick } from '../../utils/pick';
import enumModel from '../../models/enum.model';
import { stageOfLenderPlacementWithNumber } from '../../utils/enumStageOfLenderPlacement';

const getDealFilterQuery = (query) => {
  const filter = pick(query, []);
  if (query.search) {
    filter.$or = [{ dealName: new RegExp(query.search, 'i') }];
  }
  return filter;
};
export const get = catchAsync(async (req, res) => {
  const { dealId } = req.params;
  const filter = {
    _id: dealId,
  };
  const { user } = req;
  const options = {
    populate: [{ path: 'dealSummary' }],
  };
  const deal = await dealService.getOne(filter, options);
  const lenderContact = await lenderContactService.getOne({ email: user.email });
  const lenderPlacement = await lenderPlacementService.getOne({
    deal: dealId,
    lendingInstitution: lenderContact.lenderInstitute,
  });
  const { timeLine } = lenderPlacement;
  // to update the stage to reviewing for lenderPlacement
  if (
    lenderPlacement.stage === enumModel.EnumStageOfLenderPlacement.SENT &&
    !timeLine.map((changeStage) => changeStage.stage).includes(enumModel.EnumStageOfLenderPlacement.REVIEWING)
  ) {
    await lenderPlacementService.updateLenderPlacement(
      { _id: lenderPlacement._id },
      {
        stage: enumModel.EnumStageOfLenderPlacement.REVIEWING,
        stageEnumWiseNumber: stageOfLenderPlacementWithNumber(enumModel.EnumStageOfLenderPlacement.REVIEWING),
        $push: { timeLine: { stage: enumModel.EnumStageOfLenderPlacement.REVIEWING, updatedAt: new Date() } },
      }
    );
  }
  return res.status(httpStatus.OK).send({ results: deal });
});

export const list = catchAsync(async (req, res) => {
  const { query } = req;
  const user = req.user._id;
  const queryParams = getDealFilterQuery(query);
  const filter = {
    $or: [
      { user },
      { 'involvedUsers.advisors': user },
      { 'involvedUsers.borrowers': user },
      { 'involvedUsers.lenders': user },
    ],
    ...queryParams,
  };
  const options = {
    ...pick(query, ['sort', 'limit', 'page']),
    populate: [{ path: 'notes' }, { path: 'documents' }],
  };
  const deal = await dealService.getDealList(filter, options);
  return res.status(httpStatus.OK).send({ results: deal });
});

export const paginate = catchAsync(async (req, res) => {
  const { query } = req;
  const { user } = req;
  const queryParams = getDealFilterQuery(query);
  const lenderContact = await lenderContactService.getOne({ email: user.email });
  const sortingObj = pick(query, ['sort', 'order']);
  const sortObj = {
    [sortingObj.sort]: sortingObj.order,
  };
  const filter = {
    'involvedUsers.lenders': lenderContact,
    ...queryParams,
  };
  const options = {
    ...pick(query, ['limit', 'page']),
    populate: [{ path: 'notes' }, { path: 'documents' }, { path: 'dealSummary' }],
  };
  if (sortingObj.sort) {
    options.sort = sortObj;
  }
  const deal = await dealService.getDealListWithPagination(filter, options);
  deal.results = deal.results.map((dealObject) => ({
    createdAt: dealObject.createdAt,
    ...dealObject.toJSON(),
  }));
  return res.status(httpStatus.OK).send({ results: deal });
});

export const remove = catchAsync(async (req, res) => {
  const { dealId } = req.params;
  const user = req.user._id;
  const filter = {
    _id: dealId,
    user,
  };
  const deal = await dealService.removeDeal(filter);
  return res.status(httpStatus.OK).send({ results: deal });
});
