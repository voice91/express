/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import httpStatus from 'http-status';
import { lenderProgramService } from 'services';
import { catchAsync } from 'utils/catchAsync';
import { pick } from '../../utils/pick';

export const get = catchAsync(async (req, res) => {
  const { lenderProgramId } = req.params;
  const filter = {
    _id: lenderProgramId,
  };
  const options = {};
  const lenderProgram = await lenderProgramService.getOne(filter, options);
  return res.status(httpStatus.OK).send({ results: lenderProgram });
});

export const list = catchAsync(async (req, res) => {
  const filter = {};
  const options = {};
  const lenderProgram = await lenderProgramService.getLenderProgramList(filter, options);
  return res.status(httpStatus.OK).send({ results: lenderProgram });
});

export const paginate = catchAsync(async (req, res) => {
  const { query } = req;
  const sortingObj = pick(query, ['sort', 'order']);
  const sortObj = {
    [sortingObj.sort]: sortingObj.order,
  };
  const filter = {};
  const options = {
    ...pick(query, ['limit', 'page']),
  };
  if (sortingObj.sort) {
    options.sort = sortObj;
  }
  const lenderProgram = await lenderProgramService.getLenderProgramListWithPagination(filter, options);
  lenderProgram.results = lenderProgram.results.map((lenderProgramObject) => ({
    createdAt: lenderProgramObject.createdAt,
    ...lenderProgramObject.toJSON(),
  }));
  return res.status(httpStatus.OK).send({ results: lenderProgram });
});

export const create = catchAsync(async (req, res) => {
  const { body } = req;
  body.createdBy = req.user;
  body.updatedBy = req.user;
  const options = {};
  const lenderProgram = await lenderProgramService.createLenderProgram(body, options);
  return res.status(httpStatus.CREATED).send({ results: lenderProgram });
});

export const update = catchAsync(async (req, res) => {
  const { body } = req;
  body.updatedBy = req.user;
  const { lenderProgramId } = req.params;
  const filter = {
    _id: lenderProgramId,
  };
  const options = { new: true };
  const lenderProgram = await lenderProgramService.updateLenderProgram(filter, body, options);
  return res.status(httpStatus.OK).send({ results: lenderProgram });
});

export const remove = catchAsync(async (req, res) => {
  const { lenderProgramId } = req.params;
  const filter = {
    _id: lenderProgramId,
  };
  const lenderProgram = await lenderProgramService.removeLenderProgram(filter);
  return res.status(httpStatus.OK).send({ results: lenderProgram });
});
/**
 * @deprecated
 * This function is no longer in use as borrower don't have access to programs.
 */
export const listLenderProgramByInstitute = catchAsync(async (req, res) => {
  const lendingInstitution = req.params.lenderInstitute;
  const filter = {
    lenderInstitute: lendingInstitution,
  };
  const lenderPlacement = await lenderProgramService.getListLenderProgram(filter);
  return res.status(httpStatus.OK).send({ results: lenderPlacement });
});
