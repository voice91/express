/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import httpStatus from 'http-status';
import { sponsorService } from 'services';
import { catchAsync } from 'utils/catchAsync';
import { pick } from '../../utils/pick';

const getSponsorFilterQuery = (query) => {
  const filter = pick(query, ['name']);
  if (query.search) {
    filter.$or = [{ name: new RegExp(query.search, 'i') }];
  }
  return filter;
};
export const getSponsor = catchAsync(async (req, res) => {
  const { sponsorId } = req.params;
  const filter = {
    _id: sponsorId,
  };
  const options = {};
  const sponsor = await sponsorService.getOne(filter, options);
  return res.status(httpStatus.OK).send({ results: sponsor });
});

export const listSponsor = catchAsync(async (req, res) => {
  const { query } = req;
  const queryParams = getSponsorFilterQuery(query);
  const sortingObj = pick(query, ['sort', 'order']);
  const sortObj = {
    [sortingObj.sort]: sortingObj.order,
  };
  const filter = {
    ...queryParams,
  };
  const options = {
    limit: query.limit,
    skip: (query.page - 1) * query.limit,
    populate: { path: 'sponsor' },
  };
  if (sortingObj.sort) {
    options.sort = sortObj;
  }
  const sponsor = await sponsorService.getSponsorList(filter, options);
  return res.status(httpStatus.OK).send({ results: sponsor });
});
