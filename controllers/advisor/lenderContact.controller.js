/**
 * This file is generated by Appinvento, also it can be overwritten by Appinvento.
 * Only fields name will be overwritten, if the field name will be changed.
 */
import httpStatus from 'http-status';
import { lenderContactService, lendingInstitutionService, userService } from 'services';
import { catchAsync } from 'utils/catchAsync';
import { pick } from '../../utils/pick';
import ApiError from '../../utils/ApiError';
import enumModel from '../../models/enum.model';
import { removeNullFields } from '../../utils/common';

const getLenderContactFilterQuery = (query) => {
  const filter = pick(query, ['lenderInstitute']);
  if (query.search) {
    filter.$or = [{ firstName: new RegExp(query.search, 'i') }, { lastName: new RegExp(query.search, 'i') }];
  }
  return filter;
};
export const get = catchAsync(async (req, res) => {
  const { lenderContactId } = req.params;
  const filter = {
    _id: lenderContactId,
  };
  const options = {};
  const lenderContact = await lenderContactService.getOne(filter, options);
  return res.status(httpStatus.OK).send({ results: lenderContact });
});

export const list = catchAsync(async (req, res) => {
  const { query } = req;
  const queryParams = getLenderContactFilterQuery(query);
  const filter = {
    ...queryParams,
  };
  const options = {
    ...pick(query, ['sort', 'limit', 'page']),
  };
  const lenderContact = await lenderContactService.getLenderContactList(filter, options);
  return res.status(httpStatus.OK).send({ results: lenderContact });
});

export const paginate = catchAsync(async (req, res) => {
  const { query } = req;
  const queryParams = getLenderContactFilterQuery(query);
  const sortingObj = pick(query, ['sort', 'order']);
  const sortObj = {
    [sortingObj.sort]: sortingObj.order,
  };
  const filter = {
    ...queryParams,
  };
  const options = {
    ...pick(query, ['limit', 'page']),
  };
  if (sortingObj.sort) {
    options.sort = sortObj;
  }
  const lenderContact = await lenderContactService.getLenderContactListWithPagination(filter, options);
  lenderContact.results = lenderContact.results.map((lenderContactObject) => ({
    createdAt: lenderContactObject.createdAt,
    ...lenderContactObject.toJSON(),
  }));
  return res.status(httpStatus.OK).send({ results: lenderContact });
});

export const create = catchAsync(async (req, res) => {
  const { body } = req;
  body.createdBy = req.user._id;
  body.updatedBy = req.user._id;
  const loginEmail = req.user.email;
  const options = {};
  if (loginEmail === body.email) {
    throw new ApiError(httpStatus.BAD_REQUEST, ' Can not Create Lender Contact with this Email Id ');
  }
  const user = await userService.getOne({ email: body.email });
  if (user && (user.role === enumModel.EnumRoleOfUser.USER || user.role === enumModel.EnumRoleOfUser.ADVISOR)) {
    throw new ApiError(httpStatus.BAD_REQUEST, 'Advisor or Borrower can not be added as Lender Contact');
  }
  const lenderContact = await lenderContactService.createLenderContact(body, options);
  const lenderInstitute = await lendingInstitutionService.getLendingInstitutionById(lenderContact.lenderInstitute);
  const userBody = {
    firstName: lenderContact.firstName,
    companyName: lenderInstitute.lenderNameVisible,
    lastName: lenderContact.lastName,
    role: enumModel.EnumRoleOfUser.LENDER,
    enforcePassword: true,
    email: lenderContact.email,
    emailVerified: true,
    password: Math.random().toString(36).slice(-10),
  };
  // Creating the user at the time of creating contact
  await userService.createUser(userBody);
  return res.status(httpStatus.CREATED).send({ results: lenderContact });
});

export const update = catchAsync(async (req, res) => {
  const { body } = req;
  body.updatedBy = req.user;
  const { lenderContactId } = req.params;
  const loginEmail = req.user.email;
  const filter = {
    _id: lenderContactId,
  };
  const options = { new: true };
  if (loginEmail === body.email) {
    throw new ApiError(httpStatus.BAD_REQUEST, ' Can not Update Lender Contact with this Email Id ');
  }
  // for the null values we are unsetting the field from the db
  removeNullFields(body);
  const lenderContact = await lenderContactService.updateLenderContact(filter, body, options);
  return res.status(httpStatus.OK).send({ results: lenderContact });
});

export const remove = catchAsync(async (req, res) => {
  const { lenderContactId } = req.params;
  const filter = {
    _id: lenderContactId,
  };
  const lenderContact = await lenderContactService.removeLenderContact(filter);
  return res.status(httpStatus.OK).send({ results: lenderContact });
});
